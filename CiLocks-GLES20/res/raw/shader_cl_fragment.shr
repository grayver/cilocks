#version 100

precision mediump float;

uniform sampler2D u_ColorMap;
uniform sampler2D u_NormalMap;

varying vec2 v_UV;
varying vec3 v_CenterLight;
varying float v_CenterDistance;
varying vec3 v_RingLight;
varying float v_RingDistance;
varying vec3 v_Camera;


void main()
{
	vec3 normal = normalize(texture2D(u_NormalMap, v_UV).rgb * 2.0 - 1.0);
	vec4 texColor = texture2D(u_ColorMap, v_UV);
	
	vec3 ambient = 0.1 * texColor.rgb;
	
	vec3 centerDiffuse = max(dot(normal, v_CenterLight), 0.0) * texColor.rgb;
	vec3 ringDiffuse = max(dot(normal, v_RingLight), 0.0) * texColor.rgb;
	
	vec3 matSpecColor = vec3(0.800, 0.913, 1.000);
	float shininess = 80.0;
	vec3 centerSpecular = pow(max(dot(v_Camera, reflect(-v_CenterLight, normal)), 0.0), shininess) * matSpecColor;
	
	float centerAttenuation = 1.0 / (1.0 + (0.25 * v_CenterDistance * v_CenterDistance));
	float ringAttenuation = 1.0 / (1.0 + (0.25 * v_RingDistance * v_RingDistance));
	
	vec3 finalColor = ambient + centerAttenuation * (centerDiffuse + centerSpecular) + 0.5 * ringAttenuation * ringDiffuse;

	gl_FragColor = vec4(finalColor, texColor.a);
}