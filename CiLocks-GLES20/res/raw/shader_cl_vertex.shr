#version 100

uniform vec3 u_Light; // in view space
uniform mat4 u_MVPMatrix;
uniform mat4 u_MVMatrix;

attribute vec4 a_Position;
attribute vec2 a_UV;
attribute vec3 a_Normal;
attribute vec3 a_Tangent;
attribute vec3 a_Bitangent;

varying vec2 v_UV;
varying vec3 v_Light;
varying float v_Distance;

mat3 transpose(in mat3 arg)
{
	vec3 i0 = arg[0];
	vec3 i1 = arg[1];
	vec3 i2 = arg[2];
	
	mat3 result = mat3
		(
			vec3(i0.x, i1.x, i2.x),
			vec3(i0.y, i1.y, i2.y),
			vec3(i0.z, i1.z, i2.z)
		);
	return result;
}

void main()
{
	gl_Position = u_MVPMatrix * a_Position;
	
	mat3 mv = mat3(u_MVMatrix);
	vec3 normal = mv * a_Normal; // normal vector should be normalized
	vec3 tangent = mv * a_Tangent; // tangent vector should be normalized
	vec3 bitangent = mv * a_Bitangent; // bitangent vector should be normalized
	
	mat3 TBN = transpose(mat3(tangent, bitangent, normal)); 
	
	// transfer to tangent space
	vec3 position = vec3(u_MVMatrix * a_Position);
	v_UV = a_UV;
	v_Light = TBN * normalize(u_Light - position);
	v_Distance = length(u_Light - position);
}